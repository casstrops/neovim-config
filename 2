/*
    author: https://codeforces.com/profile/krishnachandran
    text editor: NVIM v0.9.1
    compiler: GNU G++20 11.2.0 (64 bit,  winlibs)
*/
 
#include <iostream>
#include <cstring>
#include <cstdio>
#include <vector>
#include <utility>
#include <algorithm>
#include <cstdlib>
#include <numeric>
#include <cmath>
#include <climits>
#include <cstdint>
#include <unordered_map>
#include <set>
#include <queue>
#include <map>
#include <unordered_set>
#include <iterator>
#include <stack>
 
typedef long long int ll;
typedef long double ld;
 
const ll MAXN = 1e6;
const ll MOD = 1e9 + 7; 
const long double PI = 3.14159265358979323846264338327950288419716939937510;

void solve(){
    ll n;
    ll dp[n][n];
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            dp[i][j] = 0;
        }
    }
    dp[0][0] = 1;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            dp[i][j] += (i - 1 >= 0)? dp[i - 1][j]: 0;
            dp[i][j] += (j - 1 >= 0)? dp[i][j - 1]: 0;
        }
    }
    std::cout << dp[n - 1][n - 1] << "\n";
    return;
}

int main(int argc, char *argv[])
{
    int T = 1;
    while(T--) solve();
    return 0;
}
 
/* stuff you should look for
 * int overflow, array bounds
 * special cases (n=1?)
 * do smth instead of nothing and stay organized
 * WRITE STUFF DOWN
 * DON'T GET STUCK ON ONE APPROACH
   - Benq */
