/*
    author: https://codeforces.com/profile/krishnachandran
    text editor: NVIM v0.9.1
    compiler: GNU G++20 11.2.0 (64 bit,  winlibs)
*/
 
#include <iostream>
#include <cstring>
#include <cstdio>
#include <vector>
#include <utility>
#include <algorithm>
#include <cstdlib>
#include <numeric>
#include <cmath>
#include <climits>
#include <cstdint>
#include <unordered_map>
#include <set>
#include <queue>
#include <map>
#include <unordered_set>
#include <iterator>
#include <stack>
 
typedef long long int ll;
typedef long double ld;
 
const ll MAXN = 1e5;
const ll MOD = 1e9 + 7; 
const long double PI = 3.14159265358979323846264338327950288419716939937510;

//dp[i][j] is the max number of pages with j money if they are allowed to read the ith book
std::vector<std::vector<ll>> dp((int)1e3 + 1, std::vector<ll> (1e5 + 1, 0));

void solve(){
    ll n, x; 
    std::cin >> n >> x;
    std::vector<int> cst(n), pg(n);
    for(auto &i: cst) std::cin >> i;
    for(auto &i: pg) std::cin >> i;
    for(int i = 0; i < n + 1; i++){
        for(int j = 0; j < x + 1; j++){
            ll a = (i - 1 >= 0)? dp[i - 1][j]: 0;
            ll b = (j - cst >= 0)? dp[i][j - cst[i]] + pg[i]: 0;
            dp[i][j] =std::max(a, b);
        }
    }
    std::cout << dp[n][x] << "\n";
    return;
}

int main(int argc, char *argv[])
{
    int T = 1;
    while(T--) solve();
    return 0;
}
 
/* stuff you should look for
 * int overflow, array bounds
 * special cases (n=1?)
 * do smth instead of nothing and stay organized
 * WRITE STUFF DOWN
 * DON'T GET STUCK ON ONE APPROACH 
   - Benq */
